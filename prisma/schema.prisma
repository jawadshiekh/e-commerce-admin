generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id              Int               @id @default(autoincrement())
  title           String
  subtitle        String
  description     String
  handle          String
  typeId          Int
  collectionId    Int
  type            Type              @relation(fields: [typeId], references: [id])
  collection      Collection        @relation(fields: [collectionId], references: [id])
  ProductOptions  ProductOptions[]
  ProductVariants ProductVariants[]
  Media           Media[]
}

model Type {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]
}

model Collection {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]
}

model ProductOptions {
  id                      Int                       @id @default(autoincrement())
  productId               Int
  title                   String
  product                 Product                   @relation(fields: [productId], references: [id])
  ProductOptionVariations ProductOptionVariations[]
  ProductVariants         ProductVariants[]
}

model ProductOptionVariations {
  id              Int               @id @default(autoincrement())
  productOptionId Int
  name            String
  ProductOptions  ProductOptions    @relation(fields: [productOptionId], references: [id])
  ProductVariants ProductVariants[]
}

model ProductVariants {
  id                       Int                     @id @default(autoincrement())
  productId                Int
  productOptionId          Int
  productOptionVariationId Int
  customTitle              String
  material                 String
  manageInventory          String
  product                  Product                 @relation(fields: [productId], references: [id])
  productOptions           ProductOptions          @relation(fields: [productOptionId], references: [id])
  productOptionVariations  ProductOptionVariations @relation(fields: [productOptionVariationId], references: [id])
  Inventory                Inventory[]
  OrderItems               OrderItems[]
}

model Currency {
  id      Int       @id @default(autoincrement())
  name    String
  Pricing Pricing[]
}

model Pricing {
  id               Int      @id @default(autoincrement())
  productVariantId Int
  currencyId       Int
  amount           Float
  isDefault        Boolean  @default(false)
  currency         Currency @relation(fields: [currencyId], references: [id])
}

model Inventory {
  id               Int             @id @default(autoincrement())
  ProductVariantId Int
  customTilte      String
  stockKeepingUnit String
  barcode          String
  quantityInStock  Int
  material         String
  height           Int
  Width            Int
  Length           Int
  Weight           Int
  MIDCode          Int
  HSCode           Int
  countryOfOrigin  String
  Product          ProductVariants @relation(fields: [ProductVariantId], references: [id])
}

model Media {
  id          Int     @id @default(autoincrement())
  productId   Int
  filePath    String
  isThumbnail Boolean @default(false)
  product     Product @relation(fields: [productId], references: [id])
}

model Users {
  id              Int               @id @default(autoincrement())
  username        String
  Orders          Orders[]
  ShippingAddress ShippingAddress[]
}

model Orders {
  id                Int             @id @default(autoincrement())
  userId            Int
  ShippingAddressId Int
  user              Users           @relation(fields: [userId], references: [id])
  ShippingAddress   ShippingAddress @relation(fields: [ShippingAddressId], references: [id])
  OrderItems        OrderItems[]
}

model OrderItems {
  id               Int             @id @default(autoincrement())
  orderId          Int
  productVariantId Int
  quantity         Int
  order            Orders          @relation(fields: [orderId], references: [id])
  product          ProductVariants @relation(fields: [productVariantId], references: [id])
}

model ShippingAddress {
  id         Int      @id @default(autoincrement())
  userId     Int
  street     String
  city       String
  state      String
  postalCode String
  country    String
  user       Users    @relation(fields: [userId], references: [id])
  Orders     Orders[]
}
